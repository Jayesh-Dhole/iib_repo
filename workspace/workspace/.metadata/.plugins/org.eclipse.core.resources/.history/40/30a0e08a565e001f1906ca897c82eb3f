

CREATE COMPUTE MODULE Str_fun_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE test1 REFERENCE TO InputRoot.XMLNSC.Name;
		-- DECLARE test1 REFERENCE TO InputRoot.XMLNSC.Address; 					 created for coalesce function
		-- SET OutputRoot.JSON.Data.Result = OVERLAY(test1 PLACING '123' from 2);    OVERLAY FUNCTION	 >> replaces string based on index
		-- SET OutputRoot.JSON.Data.Result = SUBSTRING(test1 from 4 for 3);			 SUBSTRING FUNCTION  >> used to get substring fron string
		-- SET OutputRoot.JSON.Data.Result = REPLACE(test1,'and','vs');				 REPLACE FUNCTION	 >> used to replace string with another string 
		-- SET OutputRoot.JSON.Data.Result = TRANSLATE(test1,'a','*');				 TRANSLATE FUNCTION	 >> used to replace each occurance of character
		-- SET OutputRoot.JSON.Data.Result = REPLICATE(test1,3);					 REPLICATE FUNCTION	 >> used to repeat expression 
		-- SET OutputRoot.JSON.Data.Result = COALESCE(test1,'eidiko');			     COALESCE FUNCTION	 >> return first not null value
		-- SET OutputRoot.JSON.Data.Result = CONTAINS(test1,'k');					 CONTAINS FUNCTION	 >> check if specified characters are present or not
		-- SET OutputRoot.JSON.Data.Result = STARTSWITH(test1,'a');					 STARTSWITH FUNCTION >> check if string start with character
		-- SET OutputRoot.JSON.Data.Result = ENDSWITH(test1,'h');					 ENDSWITH FUNCTION	 >> check if string start with specied character
		-- SET OutputRoot.JSON.Data.Result = LENGTH(test1);							 LENGTH FUNCTION	 >> return length of the string
		-- SET OutputRoot.Data.Result = POSITION('d' IN test1);						 POSITION FUNCTION	 >> returns position of character in string
		-- SET OutputRoot.JSON.Data.Result = LCASE(test1);							 LCASE FUNCTION		 >> converts string into lower case
		-- SET OutputRoot.JSON.Data.Result = UCASE(test1);							 UCASE FUNCTION		 >> comverts string into upper case
		-- SET OutputRoot.JSON.Data.Result = LTRIM(test1);							 LTRIM FINCTION		 >> removes extra spaces from left 
		SET OutputRoot.JSON.Data.Result = RTRIM(test1);
		
		
		
	END;
END MODULE;
