CREATE COMPUTE MODULE log4j2_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL initLog4j(external_var)INTO var1;	-- Calls the initLog4j function (defined later) to initialize Log4j with the configuration file specified in external_var
		CALL CopyEntireMessage();
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE in_data,out_data CHARACTER;	--Declares two variables to hold the input and output data as character strings.
		SET OutputRoot.JSON.Data.Root = InputRoot.XMLNSC.Root;
		--Converts the input XML and output message to a character string with appropriate encoding and CCSID
		SET in_data = CAST(ASBITSTREAM(InputRoot.XMLNSC CCSID InputRoot.Properties.CodedCharSetId) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding); 
		SET out_data = CAST(ASBITSTREAM(OutputRoot.JSON.Data CCSID InputRoot.Properties.CodedCharSetId) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
		CALL WriteLogFile(MessageFlowLabel, 'Logger1', 'DEBUG','Input_Data:' || in_data) INTO var1;	--Logs the input data at the DEBUG level using the WriteLogFile function.
        CALL WriteLogFile(MessageFlowLabel, 'Logger1', 'DEBUG', 'Output_Data' || out_data) INTO var1;	--Logs the output data at the DEBUG level using the WriteLogFile function.
		-- MessageFlowLabel is passed as part of the log entry to indicate the specific message flow that generated the log message.
	END;
END MODULE;