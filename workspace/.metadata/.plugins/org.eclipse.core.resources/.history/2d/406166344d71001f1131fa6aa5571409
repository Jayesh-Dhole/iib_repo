BROKER SCHEMA ExceptionHandling


CREATE COMPUTE MODULE Exception_hndl_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE msg_id CHARACTER InputLocalEnvironment.Destination.HTTP.RequestIdentifier;	--Captures the HTTP request identifier from the InputLocalEnvironment tree
		DECLARE exe REFERENCE TO InputExceptionList.*[1];	--Defines a reference to the first element in the InputExceptionList tree. 
		DECLARE File CHARACTER;	
		DECLARE Line CHARACTER;
		DECLARE Type CHARACTER;
		DECLARE Text CHARACTER;
		DECLARE Number INTEGER;
		DECLARE Label CHARACTER;

		WHILE LASTMOVE(exe) DO
    		MOVE exe LASTCHILD;
    		IF exe.Number IS NOT NULL THEN 
        		SET File = exe.File;
        		SET Line = exe.Line;
        		SET Type = exe.Type;
        		SET Label = exe.Label;
        		SET Number = exe.Number;
        		SET Text = exe.Text;
    		END IF;
		END WHILE;

		SET OutputRoot.XMLNSC.ExceptionList.Line = Line;
		SET OutputRoot.XMLNSC.ExceptionList.Number = Number;
		SET OutputRoot.XMLNSC.ExceptionList.Text = Text;

		CALL ExceptInsert(ApplicationLabel, MessageFlowLabel, NodeLabel, msg_id, Line, CAST(Number AS CHARACTER), Text, CURRENT_TIMESTAMP);
	END;
END MODULE;

CREATE PROCEDURE ExceptInsert (IN ApplicationName CHARACTER, IN MessageFlowName CHARACTER, IN NodeName CHARACTER, IN Msg_id CHARACTER, IN line CHARACTER, IN number CHARACTER,
    IN text CHARACTER,
    IN tp TIMESTAMP
)
LANGUAGE DATABASE
EXTERNAL NAME "insert_exception";
